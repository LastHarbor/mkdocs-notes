name: ci

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Cache dependencies
        run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Generate auth.js with secrets
        run: |
          echo "window.env = {" > docs/js/auth.js
          echo "  AUTH0_CLIENT_ID: '\"${{ secrets.AUTH0_CLIENT_ID }}\"'," >> docs/js/auth.js
          echo "  AUTH0_CLIENT_SECRET: '\"${{ secrets.AUTH0_CLIENT_SECRET }}\"'," >> docs/js/auth.js
          echo "  AUTH0_DOMAIN: '\"${{ secrets.AUTH0_DOMAIN }}\"'," >> docs/js/auth.js
          echo "  SECRET_KEY: '\"${{ secrets.SECRET_KEY }}\"'" >> docs/js/auth.js
          echo "};" >> docs/js/auth.js

          cat << 'EOF' >> docs/js/auth.js

          window.onload = function() {
              if (!localStorage.getItem('auth_token')) {
                  login();
              } else {
                  validateToken();
              }
          };

          function login() {
              var auth0Domain = window.env.AUTH0_DOMAIN;
              var clientId = window.env.AUTH0_CLIENT_ID;
              var redirectUri = window.location.origin;
              var scope = 'openid profile email';

              var authUrl = `https://${auth0Domain}/authorize?response_type=token&client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scope}`;

              window.location = authUrl;
          }

          function validateToken() {
              var token = localStorage.getItem('auth_token');
              var auth0Domain = window.env.AUTH0_DOMAIN;

              fetch(`https://${auth0Domain}/userinfo`, {
                  headers: {
                      'Authorization': `Bearer ${token}`
                  }
              })
              .then(response => {
                  if (!response.ok) {
                      throw new Error('Token validation failed');
                  }
                  return response.json();
              })
              .then(data => {
                  console.log('User authenticated:', data);
              })
              .catch(error => {
                  console.error('Authentication error:', error);
                  login();
              });
          }

          (function() {
              function parseHash(hash) {
                  var params = hash.slice(1).split('&').reduce(function(result, item) {
                      var parts = item.split('=');
                      result[parts[0]] = parts[1];
                      return result;
                  }, {});
                  return params;
              }
              
              var hash = window.location.hash;
              if (hash.includes('access_token')) {
                  var params = parseHash(hash);
                  localStorage.setItem('auth_token', params['access_token']);
                  window.location.hash = '';
              }
          })();
          EOF

      - name: Build MkDocs site
        run: mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
